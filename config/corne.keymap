/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

&lt {
    quick-tap-ms = <140>;
    tapping-term-ms = <150>;
};

&mt {
    flavor = "balanced";
    quick-tap-ms = <140>;
    tapping-term-ms = <150>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };
    
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        LWindowsKey {
            bindings = <&kp LCMD>;
            key-positions = <37 38>;
        };

        lpar {
            bindings = <&kp LPAR>;
            key-positions = <16 17>;
        };

        rpar {
            bindings = <&kp RPAR>;
            key-positions = <19 18>;
        };

        lbkt {
            bindings = <&kp LBKT>;
            key-positions = <4 5>;
        };

        rbkt {
            bindings = <&kp RBKT>;
            key-positions = <6 7>;
        };

        lbrc {
            bindings = <&kp LBRC>;
            key-positions = <28 29>;
        };

        rbrc {
            bindings = <&kp RBRC>;
            key-positions = <30 31>;
        };

        MoveWinLeft {
            bindings = <&kp LG(LEFT)>;
            key-positions = <27 28>;
        };

        MoveWinRight {
            bindings = <&kp LG(RIGHT)>;
            key-positions = <31 32>;
        };

        RightDesktop {
            bindings = <&kp LG(LC(RIGHT))>;
            key-positions = <19 20>;
        };

        LeftDesktop {
            bindings = <&kp LG(LC(LEFT))>;
            key-positions = <16 15>;
        };
    };

    macros {
        zed_em_kay: zed_em_kay {
            compatible = "zmk,behavior-macro";
            label = "ZM_zed_em_kay";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp Z &kp M &kp K>,
                <&macro_release>,
                <&kp LSHFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
   &kp TAB   &kp Q   &kp W     &kp E            &kp R      &kp T                    &kp Y           &kp U      &kp I    &kp O     &kp P      &kp BSLH
   &kp ESC   &kp A   &kp S     &kp D            &kp F      &kp G                    &kp H           &kp J      &kp K    &kp L     &kp SEMI   &kp SQT
 &kp LSHFT   &kp Z   &kp X     &kp C            &kp V      &kp B                    &kp N           &kp M      &kp COMMA &kp DOT  &kp FSLH   &kp DEL
                               &kp LALT   &mt LCTRL SPACE  &lt 1 TAB                &lt 2 BACKSPACE &mt LSHIFT RET   &kp LGUI
            >;
        };

        raise {
            bindings = <
    &kp F1     &kp F2     &kp F3     &kp F4       &kp F5         &kp F6            &kp F7    &kp F8  &kp F9    &kp F10  &kp F11  &kp F12
 &kp TILDE  &kp MINUS  &kp UNDER   &kp PLUS    &kp EQUAL  &kp LC(SPACE)          &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans   &trans
    &trans     &trans     &trans  &kp LC(C)  &kp LS(INS)       &kp HOME          &kp END   &trans    &trans  &trans     &trans   &trans
                                     &trans       &trans         &trans            &trans    &trans  &trans
            >;
        };

        lower {
            bindings = <
    &trans      &kp EXCL        &kp AT      &kp HASH      &kp DLLR     &kp PRCNT             &kp CARET      &kp AMPS      &kp STAR      &kp LPAR      &kp RPAR  &trans
 &kp GRAVE   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5          &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8      &kp NUMBER_9  &kp NUMBER_0  &trans
 &trans      &trans        &trans        &trans        &trans        &trans                &trans        &trans        &trans      &trans        &trans  &trans
                                              &trans        &trans        &trans                &trans        &trans        &trans
            >;
        };

        adj {
            bindings = <
 &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &bt BT_CLR          &trans  &trans  &trans  &trans  &trans  &trans
        &kp C        &trans        &trans        &trans  &trans      &trans          &trans  &trans  &trans  &trans  &trans  &trans
       &trans        &trans        &trans        &trans  &trans      &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                 &trans  &trans      &trans          &trans  &trans  &trans
            >;
        };
    };
};
